{"version":3,"sources":["src/_scripts/node_modules/browser-pack/_prelude.js","src/_scripts/src/_scripts/main.js"],"names":[],"mappings":"AAAA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"main.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","// Main javascript entry point\n// Should handle bootstrapping/starting application\n\n'use strict';\n\n// Listen for keydown events with assoicated audio\nwindow.addEventListener('keydown', function(e){\n  const audio = document.querySelector(`audio[data-key=\"${e.keyCode}\"]`); // Grab the audio\n  const key = document.querySelector(`.key[data-key=\"${e.keyCode}\"]`); // Grab the elements with the key class on it\n  if(!audio) return ; // Don't move forward if there's no audio associated with a key\n  audio.currentTime = 0; // Rewind to the beginning (for rolls etc)\n  audio.play(); // Play the audio\n  key.classList.add('playing'); // Add the playing class\n\n});\n\n// Remove the CSS class when the animation is over\nfunction removeTransition(e){\n  if (e.propertyName !== 'transform') return; // Prevent any events without transform on them from moving forward\n  this.classList.remove('playing'); // Remove the class\n}\n\n// Grab each key and listen for the end of the transition, then run the removeTransition class\nconst keys = document.querySelectorAll('.key');\nkeys.forEach(key => key.addEventListener('transitionend',removeTransition));\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvX3NjcmlwdHMvbWFpbi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbigpe2Z1bmN0aW9uIHIoZSxuLHQpe2Z1bmN0aW9uIG8oaSxmKXtpZighbltpXSl7aWYoIWVbaV0pe3ZhciBjPVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmU7aWYoIWYmJmMpcmV0dXJuIGMoaSwhMCk7aWYodSlyZXR1cm4gdShpLCEwKTt2YXIgYT1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK2krXCInXCIpO3Rocm93IGEuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixhfXZhciBwPW5baV09e2V4cG9ydHM6e319O2VbaV1bMF0uY2FsbChwLmV4cG9ydHMsZnVuY3Rpb24ocil7dmFyIG49ZVtpXVsxXVtyXTtyZXR1cm4gbyhufHxyKX0scCxwLmV4cG9ydHMscixlLG4sdCl9cmV0dXJuIG5baV0uZXhwb3J0c31mb3IodmFyIHU9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZSxpPTA7aTx0Lmxlbmd0aDtpKyspbyh0W2ldKTtyZXR1cm4gb31yZXR1cm4gcn0pKCkiLCIvLyBNYWluIGphdmFzY3JpcHQgZW50cnkgcG9pbnRcbi8vIFNob3VsZCBoYW5kbGUgYm9vdHN0cmFwcGluZy9zdGFydGluZyBhcHBsaWNhdGlvblxuXG4ndXNlIHN0cmljdCc7XG5cbi8vIExpc3RlbiBmb3Iga2V5ZG93biBldmVudHMgd2l0aCBhc3NvaWNhdGVkIGF1ZGlvXG53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGZ1bmN0aW9uKGUpe1xuICBjb25zdCBhdWRpbyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYGF1ZGlvW2RhdGEta2V5PVwiJHtlLmtleUNvZGV9XCJdYCk7IC8vIEdyYWIgdGhlIGF1ZGlvXG4gIGNvbnN0IGtleSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYC5rZXlbZGF0YS1rZXk9XCIke2Uua2V5Q29kZX1cIl1gKTsgLy8gR3JhYiB0aGUgZWxlbWVudHMgd2l0aCB0aGUga2V5IGNsYXNzIG9uIGl0XG4gIGlmKCFhdWRpbykgcmV0dXJuIDsgLy8gRG9uJ3QgbW92ZSBmb3J3YXJkIGlmIHRoZXJlJ3Mgbm8gYXVkaW8gYXNzb2NpYXRlZCB3aXRoIGEga2V5XG4gIGF1ZGlvLmN1cnJlbnRUaW1lID0gMDsgLy8gUmV3aW5kIHRvIHRoZSBiZWdpbm5pbmcgKGZvciByb2xscyBldGMpXG4gIGF1ZGlvLnBsYXkoKTsgLy8gUGxheSB0aGUgYXVkaW9cbiAga2V5LmNsYXNzTGlzdC5hZGQoJ3BsYXlpbmcnKTsgLy8gQWRkIHRoZSBwbGF5aW5nIGNsYXNzXG5cbn0pO1xuXG4vLyBSZW1vdmUgdGhlIENTUyBjbGFzcyB3aGVuIHRoZSBhbmltYXRpb24gaXMgb3ZlclxuZnVuY3Rpb24gcmVtb3ZlVHJhbnNpdGlvbihlKXtcbiAgaWYgKGUucHJvcGVydHlOYW1lICE9PSAndHJhbnNmb3JtJykgcmV0dXJuOyAvLyBQcmV2ZW50IGFueSBldmVudHMgd2l0aG91dCB0cmFuc2Zvcm0gb24gdGhlbSBmcm9tIG1vdmluZyBmb3J3YXJkXG4gIHRoaXMuY2xhc3NMaXN0LnJlbW92ZSgncGxheWluZycpOyAvLyBSZW1vdmUgdGhlIGNsYXNzXG59XG5cbi8vIEdyYWIgZWFjaCBrZXkgYW5kIGxpc3RlbiBmb3IgdGhlIGVuZCBvZiB0aGUgdHJhbnNpdGlvbiwgdGhlbiBydW4gdGhlIHJlbW92ZVRyYW5zaXRpb24gY2xhc3NcbmNvbnN0IGtleXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcua2V5Jyk7XG5rZXlzLmZvckVhY2goa2V5ID0+IGtleS5hZGRFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJyxyZW1vdmVUcmFuc2l0aW9uKSk7XG4iXX0="}